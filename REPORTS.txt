
1. 05/10/2024: Aktuelle Projektstruktur                    
          Das Projekt verwendet derzeit ausschließlich Python Django, ein high-level Python-Webframework. 
     Im Projektordner finden Sie zwei Hauptordner (in Python Django als "Apps" genannt): Camera und Sony_camera_control.  

          Django generiert den Ordner Sony_camera_control (App) automatisch beim Erstellen des Projekts. Dies ist im 
     Wesentlichen die Haupt-App des Projekts, die andere hinzugefügte Apps (wie unseren Camera-Ordner) verwaltet und 
     steuert, wie diese miteinander und/oder mit dem Frontend kommunizieren. In Django übernimmt jede App eine separate 
     Funktion. Beispielsweise könnte später eine App die Logik zur Abfrage, Extraktion von Kameradaten aus dem Frontend 
     sowie das Abfragen der Datenbank für passende APIs übernehmen. Eine andere App könnte die Verwaltung der Datenbanken 
     übernehmen und es dem Admin ermöglichen, deren Inhalt zu ändern.  

          Momentan dient die Camera App nur als Platzhalter, um die Kameraverbindungen zu testen und einige API-Aufrufe 
     auszuprobieren. In der Camera App sind folgende Dateien wichtig:  
          - admin.py: Hier werden die Modelle in die Admin-Benutzeroberfläche registriert.  
          - models.py: Hier werden die Tabellenstrukturen in der Datenbank definiert.  
          - urls.py: Verwaltet die Endpunkte zu den Funktionen (Views), die mit dem Frontend interagieren.  
          - views.py: Hier werden diese Funktionen implementiert.  

          In "views.py" kann momentan nur nach der Kamera über SSDP M-Search gesucht, die Location-URL empfangen und die 
     Gerätespezifikation der Kamera abgerufen werden. Die extrahierten Informationen werden dann in der Datenbank gespeichert. 
     (Diese Funktionen können über das Frontend beim Start der App getestet werden.) Außerdem gibt es am Ende eine Funktion, 
     um eine API-Anfrage an die Kamera zu senden.  

________________________________________________________________________________________________________________________________
2. 06.10.2024:
     - Local Service wurde zur Clientseite hinzugefügt.

________________________________________________________________________________________________________________________________
3. 07.10.2024:
     - Beziehungstabellen für Kameramodell, API und API-Gruppen wurden entworfen.
     - Tabellenstruktur in DB wurde entsprechend angepasst.

________________________________________________________________________________________________________________________________
4. 08.10.2024:
     - Die Logik, um Anfragen vom Frontend an den Local Service über JS zu senden, wurde implementiert.

________________________________________________________________________________________________________________________________
5. 12.10.2024:
     - Versuchte, Django Unicorn zu implementieren.

________________________________________________________________________________________________________________________________
6. 13.10.2024:
     - Versucht herauszufinden, wie das Datenbanksystem strukturiert werden kann, um die entsprechenden JSON-Objekte optimal in 
     ihre Modelle zu integrieren und die Kommunikation zu verbessern.

________________________________________________________________________________________________________________________________
7. 16.10.2024:
     - Habe erneut versucht, Django Unicorn für das Rendering auf derselben Seite zu integrieren, hat jedoch nicht wie erwartet 
     funktioniert -> verworfen.

________________________________________________________________________________________________________________________________
8. 17.10.2024:
     - Die Programmstruktur wurde refaktoriert, um eine bessere Gruppierung zu ermöglichen.
     - Das Template für das Camera-Such und das Template für die Camerasteuerung wurden getrennt.

________________________________________________________________________________________________________________________________
9. 21.10.2024:
     - Die Kontrollansicht wurde kombiniert und die Abrufmethode angepasst, um die Endpunkte zu vereinfachen.
     - Es wurde recherchiert, wie das LiveView-Streaming funktioniert, also das Streamen der Kamerasicht zum Client (noch nicht 
     abgeschlossen).

________________________________________________________________________________________________________________________________
10. 22.10.2024:
     - Die Logik für das Senden von API-Anfragen wurde auf die Client-Seite verlagert. Der Server liefert dem Client das passende 
     JSON-Objekt und die ActionListUrl. Um die Kamera zu steuern, muss der Client selbst die API-Anfrage an die 
     Kamera senden.
     - Der Local Service wurde erweitert, um als Proxy zu funktionieren und die API-Anfrage vom Client an die Kamera weiterzuleiten 
     (der Local Service ist derjenige, der tatsächlich die API-Anfrage sendet) -> um die CORS-Einschränkungen der Browsers 
     zu umgehen.

________________________________________________________________________________________________________________________________
11. 23.10.2024:
     - Verbessern Datenbankstruktur.
     - Methoden zum dynamischen Abrufen von JSON-Objekten und Parametern aus der Datenbank wurden implementiert (teilweise).
     - Die Logik, um die UUID vom Kamera-Suchtemplate an die Steuerungsansicht zu übergeben, um die aktuelle Kamera 
     nachzuverfolgen, wurde implementiert.

________________________________________________________________________________________________________________________________
12. 25.10.2024:
     - Versucht LiveView zu streamen, unerfolgreich.

________________________________________________________________________________________________________________________________
13. 26.10.2024:
     - Live-View erfolgreich in den Client-Browser gestreamt.
     - Local Service wurde refaktoriert und gereinigt bzw. Beschreibungen wurden addiert.

________________________________________________________________________________________________________________________________
14. 29.10.2024:
     - Einige Kamera-Modus-Beziehungen in der Datenbank wurde getestet.
     - Einen Sandbox-Modus wird erstellt, um jederzeit eine beliebige Kamera-API zu senden, testen und beobachten (in Bearbeitung).

________________________________________________________________________________________________________________________________
15. 01.11.2024:
     - Verbessern Sandbox-Modus, ermöglicht Datenübertragung zwischen Sandbox-Modus und Local Service.

________________________________________________________________________________________________________________________________
16. 01.11.2024:
     - Behoben: UUID wurde nicht korrekt vom Frontend zum Server übertragen und vom Server verarbeitet.



